name: backend-CICD

on:
  push:
    branches: [ "main" ]
    paths:
      - 'todo-backend/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'todo-backend/**'

env:
  DOCKER_IMAGE: ${{ secrets.REGISTRY }}/${{ secrets.IMAGE_NAME }}:latest
  NAME: todo-backend
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run : cd todo-backend && yarn install && npm run test

  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # buildx 설정      
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2 # build-push-action 사용
        with:
          context: ./todo-backend
          file: ./todo-backend/Dockerfile
          push: true
          tags: ${{env.DOCKER_IMAGE}}}
          cache-from: type=gha # Guthub Actions 용 캐시
          cache-to: type=gha,mode=max
  deploy:
    needs: docker  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted ] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 3000 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}
          docker run -d -p 3001:3001 --name ${{env.NAME}} --restart always ${{ env.DOCKER_IMAGE }}
          
